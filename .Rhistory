install.packages("pdftools")
library(shiny); runApp('shinyjrnl.R')
install.packages("pdftools")
install.packages("pdftools")
library(pdftools)
library(ruimtehol)
library(dplyr)
library(readr)
library(caret)
set.seed(123456789)
# load("jrnl.RData")
source("func_clean.R")
source("func_tag.R")
# Get training data ----
source("eb_class.R")
# Get training data ----
source("eb_class.R")
# Get training data ----
source("eb_class.R")
View(class)
library(pdftools)
library(ruimtehol)
library(dplyr)
library(readr)
library(caret)
set.seed(123456789)
# load("jrnl.RData")
source("func_clean.R")
source("func_tag.R")
# load("jrnl.RData")
source("func_clean.R")
source("func_tag.R")
# Get training data ----
source("eb_class.R")
files <- list.files(path = "jrnl",pattern = "pdf$", full.names = TRUE)
jrnl <- sapply(files, pdf_text, USE.NAMES = FALSE)
jrnl_df <- lapply(jrnl, function(x) paste(x, collapse = "\n"))
View(jrnl_df)
df <- data.frame("text" = Reduce(rbind, jrnl_df),
fix.empty.names = FALSE)
View(df)
df$text[1]
df$text <- clean_string(df$text)
View(clean_string)
View(tag_fun)
df_jrnl <- data.frame("text" = df$text, "classification" = class)
View(df_jrnl)
set.seed(123456789)
index <- createDataPartition(
y = df_jrnl$classification,
times = 1,
p = 0.8,
list = TRUE)
train <- df_jrnl[index$Resample1,]
test  <- df_jrnl[-index$Resample1,]
View(test)
model <- embed_tagspace(x = train$text, y = train$classification,
dim = 60,
lr = 0.01, epoch = 20, loss = "softmax", adagrad = TRUE,
similarity = "cosine", negSearchLimit = 3,
ngrams = 2, minCount = 2)
plot(model)
pred <- lapply(test$text, function(x) tag_fun(x))
pred <- data.frame("classification"=Reduce(rbind, pred),
fix.empty.names = FALSE)
# tb <- table(test$classification,pred$classification)
# sum(tb[2,2],tb[3,3])/nrow(test)*100
caret::confusionMatrix(pred$classification,test$classification)
plot(model)
pred <- lapply(test$text, function(x) tag_fun(x))
View(test)
View(tag_fun)
library(shiny); runApp('shinyjrnl.R')
library(pdftools)
library(ruimtehol)
library(dplyr)
library(readr)
library(caret)
set.seed(123456789)
# load("jurnal.RData")
# source("func_clean.R")
source("func_tag.R")
source("eb_class.R")
files <- list.files(path = "jrnl",pattern = "pdf$", full.names = TRUE)
text <- sapply(files, pdf_text, USE.NAMES = FALSE)
# df <- lapply(text, function(x) paste(x, collapse = "\n"))
# df <- data.frame("text" = Reduce(rbind, df),
#                 fix.empty.names = FALSE)
# df$text <- clean_string(df$text)
df_jrnl <- tibble("text" = text, class)
set.seed(123456789)
index <- createDataPartition(
y = df_jrnl$classification,
times = 1,
p = 0.8,
list = TRUE)
train <- df_jrnl[index$Resample1,]
test  <- df_jrnl[-index$Resample1,]
View(test)
# Predict / verify model ----
model <- embed_tagspace(x = train$text, y = train$classification,
early_stopping = 0.8, validationPatience = 10,
dim = 50,
lr = 0.01, epoch = 40, loss = "softmax", adagrad = TRUE,
similarity = "cosine", negSearchLimit = 50,
ngrams = 2, minCount = 2, bucket = 100000,
maxTrainTime = 2 * 60)
# plot ----
plot(model)
pred <- lapply(test$text, function(x) tag_fun(x))
pred <- tibble("classification"=Reduce(rbind, pred),
fix.empty.names = FALSE)
table(pred$classification)
table(test$classification)
levels(pred$classification) <- levels(test$classification)
# tb <- table(test$classification,pred$classification)
# sum(tb[2,2],tb[3,3])/nrow(test)*100
caret::confusionMatrix(pred$classification,test$classification)
table(test$classification)
table(pred$classification)
levels(pred$classification)
levels(pred$classification) <- c("Acceptable","Adequate","Excellent","Fail","Good","Outstanding")
levels(pred$classification)
# tb <- table(test$classification,pred$classification)
# sum(tb[2,2],tb[3,3])/nrow(test)*100
caret::confusionMatrix(pred$classification,test$classification)
table(pred$classification)
levels(pred$classification)
levels(test$classification)
levels(test$classification)
levels(test$classification) <- c("Acceptable","Adequate","Excellent","Fail","Good","Outstanding")
# tb <- table(test$classification,pred$classification)
# sum(tb[2,2],tb[3,3])/nrow(test)*100
caret::confusionMatrix(pred$classification,test$classification)
levels(test$classification) <- c("Acceptable","Adequate","Excellent","Fail","Good","Outstanding")
levels(test$classification)
levels(pred$classification)
table(test$classification)
table(pred$classification)
pred$classification <- factor(c("Acceptable","Fail","Outstanding"))
table(pred$classification)
levels(pred$classification)
table(factor(pred$classification, levels=min(test$classification):max(test$classification)),
factor(test$classification, levels=min(test$classification):max(test$classification)))
test$classification <- as.factor(test$classification)
pred$classification <- as.factor(pred$classification)
# tb <- table(test$classification,pred$classification)
# sum(tb[2,2],tb[3,3])/nrow(test)*100
caret::confusionMatrix(pred$classification,test$classification)
